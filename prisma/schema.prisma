// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String
  password  String
  fullNames String
  type      String
  contact   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clinic {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  contact   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  province  String
  district  String
  sector    String
  cell      String
  village   String
  email     String
  type      String
  password  String

  receptionist receptionist[]
  Doctor       Doctor[]
  nurse        nurse[]
  laborante    laborante[]
  patient      patient[]
  records      records[]
}

model receptionist {
  id        Int      @id @default(autoincrement())
  fullName  String
  address   String
  contact   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  province  String
  district  String
  sector    String
  cell      String
  village   String
  email     String
  password  String

  clinicId Int
  clinic   Clinic @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
}

model Doctor {
  id        Int      @id @default(autoincrement())
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   String
  province  String
  district  String
  sector    String
  cell      String
  village   String
  email     String
  password  String

  clinicId Int
  clinic   Clinic    @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
  records  records[]
}

model nurse {
  id        Int      @id @default(autoincrement())
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   String
  province  String
  district  String
  sector    String
  cell      String
  village   String
  email     String
  password  String

  clinicId Int
  clinic   Clinic @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
}

model laborante {
  id        Int      @id @default(autoincrement())
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   String
  province  String
  district  String
  sector    String
  cell      String
  village   String
  email     String
  password  String

  clinicId Int
  clinic   Clinic @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
}

model patient {
  code           Int      @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  fullName       String
  address        String
  contact        String
  DOB            String
  gender         String
  email          String
  province       String
  district       String
  sector         String
  village        String
  marital_status String
  closeFullName  String
  closePhone     String

  clinicId   Int
  clinic     Clinic       @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
  records    records[]
  sign_vital sign_vital[]
}

model records {
  id             Int              @id @default(autoincrement())
  record_code    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  patientId      Int
  consultation   String
  price          Int
  patient        patient          @relation(fields: [patientId], references: [code], onUpdate: Cascade)
  clinicId       Int
  clinic         Clinic           @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
  doctorId       Int
  doctor         Doctor           @relation(fields: [doctorId], references: [id], onUpdate: Cascade)
  record_details record_details[]
}

model record_details {
  id           Int      @id @default(autoincrement())
  recordId     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  consultation String
  destination  String
  status       String
  record_code  String
  record       records  @relation(fields: [recordId], references: [id], onUpdate: Cascade)
}

model sign_vital {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  weight       String
  height       String
  hasInsurance Boolean
  insurance    String
  temperature  String
  BP           String
  pulse        String
  patientId    Int
  patient      patient  @relation(fields: [patientId], references: [code], onUpdate: Cascade)
}
