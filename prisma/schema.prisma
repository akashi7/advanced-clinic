generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String
  password  String
  fullNames String
  contact   String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clinic {
  id           Int      @id @default(autoincrement())
  name         String
  clinicCode   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  province     String
  district     String
  sector       String
  cell         String
  village      String
  email        String
  contactEmail String
  contactPhone String
  contactName  String
  contactTitle String
  role         String
  isActive     Boolean  @default(true)

  patient      patient[]
  records      records[]
  insurance    insurance[]
  receptionist receptionist[]
  nurse        nurse[]
  doctor       doctor[]
  laborante    laborante[]
  User         User[]
  examList     examList[]
  consultation consultation[]
  priceList    priceList[]
  invoice      invoice[]
}

model User {
  id       Int     @id @default(autoincrement())
  fullName String
  password String
  email    String
  role     String
  userId   Int
  clinicId Int
  clinic   Clinic  @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
  isActive Boolean @default(true)
}

model patient {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  fullName         String
  phone            String?
  DOB              String
  gender           String
  email            String?
  province         String
  district         String
  sector           String
  village          String
  marital_status   String?
  isInfant         Boolean? @default(false)
  GuardianNames    String?
  GuardianPhone    String?
  GuardianIdNumber String?
  idNumber         String?
  MotherName       String?
  MotherPhone      String?
  MotherIdnumber   String?
  FatherName       String?
  FatherPhone      String?
  FatherIdnumber   String?

  clinicId   Int
  clinic     Clinic       @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
  records    records[]
  sign_vital sign_vital[]
  invoice    invoice[]
}

model records {
  record_code    Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  patientId      Int
  fullNames      String
  insurance      String
  patient        patient          @relation(fields: [patientId], references: [id], onUpdate: Cascade)
  clinicId       Int
  clinic         Clinic           @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
  doctor         String
  status         String           @default("inactive")
  recordStatus   String?          @default("pending")
  nurse          String?
  record_details record_details[]
  medication     medication[]
  exam           exam[]
  invoice        invoice[]
  sign_vital     sign_vital[]
  payment        payment[]
}

model payment {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  amount        Int
  insurancePaid Int
  recordId      Int
  itemId        Int
  type          String
  invoiceId     Int
  invoice       invoice  @relation(fields: [invoiceId], references: [id], onUpdate: Cascade)
  record        records  @relation(fields: [recordId], references: [record_code], onUpdate: Cascade)
}

model record_details {
  id          Int      @id @default(autoincrement())
  recordId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fullNames   String
  destination String
  status      String
  nurse       String?
  doctor      String?
  laborante   String?
  examResults String?
  record      records  @relation(fields: [recordId], references: [record_code], onUpdate: Cascade)
}

model sign_vital {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  weight      String
  height      String
  temperature String
  BP          String
  pulse       String
  patientId   Int
  patient     patient  @relation(fields: [patientId], references: [id], onUpdate: Cascade)
  recordId    Int
  record      records  @relation(fields: [recordId], references: [record_code], onUpdate: Cascade)
}

model medication {
  id           Int      @id @default(autoincrement())
  record_code  Int
  record       records  @relation(fields: [record_code], references: [record_code], onUpdate: Cascade)
  medications  String[]
  instructions String[]
}

model exam {
  id          Int     @id @default(autoincrement())
  record_code Int
  record      records @relation(fields: [record_code], references: [record_code], onUpdate: Cascade)
  exam        Int
  conducted   String  @default("no")
  observation String?
}

model examList {
  id          Int    @id @default(autoincrement())
  Name        String
  Code        String
  description String
  clinicId    Int
  clinic      Clinic @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
}

model consultation {
  id           Int    @id @default(autoincrement())
  type         String
  description  String
  clinicId     Int
  clinic       Clinic @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
  consultation String
}

model priceList {
  id          Int       @id @default(autoincrement())
  itemId      Int
  price       Int
  insuranceId Int
  clinicId    Int
  Type        String
  insurance   insurance @relation(fields: [insuranceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  clinic      Clinic    @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
}

model insurance {
  id        Int         @id @default(autoincrement())
  name      String
  rate      Int
  clinicId  Int
  clinic    Clinic      @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
  priceList priceList[]
}

model invoice {
  id                    Int               @id @default(autoincrement())
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  patientId             Int
  patient               patient           @relation(fields: [patientId], references: [id], onUpdate: Cascade)
  recordId              Int
  record                records           @relation(fields: [recordId], references: [record_code], onUpdate: Cascade)
  rating                String
  insuranceId           Int
  clinicId              Int
  amountToBePaid        Int
  amountPaid            Int
  unpaidAmount          Int
  amountPaidByInsurance Int
  clinic                Clinic            @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
  invoice_details       invoice_details[]
  payment               payment[]
}

model invoice_details {
  id            Int     @id @default(autoincrement())
  invoiceId     Int
  invoice       invoice @relation(fields: [invoiceId], references: [id], onUpdate: Cascade)
  itemId        Int
  type          String
  price         Int
  priceToPay    Int
  insurancePaid Int
  hasPaid       Boolean @default(false)
}

model receptionist {
  id        Int      @id @default(autoincrement())
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String
  email     String
  role      String
  gender    String

  clinicId Int
  clinic   Clinic @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
}

model nurse {
  id        Int      @id @default(autoincrement())
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String
  email     String
  role      String
  gender    String

  clinicId Int
  clinic   Clinic @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
}

model doctor {
  id        Int      @id @default(autoincrement())
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String
  email     String
  role      String
  gender    String

  clinicId Int
  clinic   Clinic @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
}

model laborante {
  id        Int      @id @default(autoincrement())
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String
  email     String
  role      String
  gender    String

  clinicId Int
  clinic   Clinic @relation(fields: [clinicId], references: [id], onUpdate: Cascade)
}

//Model invoice,invoice_details,insurance,examList,PriceList
